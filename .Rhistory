my_indexes[i]<- aux
aux <- aux + 12
}
y <- 1:length(my_indexes)
for (i in 1:length(my_indexes))
{
y[i]<- x[my_indexes[i]]
}
aux <- log10(y)
F = function(q) pnorm(q, mean = mean(aux), sd = sd(aux))
y
aux
sum(aux > 6 & aux <= 7)
(F(7) - F(6))* 1704
aux
?gapminder
data(gapminder)
library(gapminder)
data("gapminder")
?gapminder
x <- gapminder$pop
aux <- 1
#my_indexes <- 1:142
for (i in 1:142)
{
my_indexes[i]<- aux
aux <- aux + 12
}
y <- 1:length(my_indexes)
for (i in 1:length(my_indexes))
{
y[i]<- x[my_indexes[i]]
}
aux <- log10(y)
F = function(q) pnorm(q, mean = mean(aux), sd = sd(aux))
n = length(aux)
sum(aux >6 & aux <= 7)
(F(7)- F(6))* n
x <- gapminder$pop
aux <- 1
#my_indexes <- 1:142
for (i in 1:142)
{
my_indexes[i]<- aux
aux <- aux + 12
}
#y <- 1:length(my_indexes)
for (i in 1:length(my_indexes))
{
y[i]<- x[my_indexes[i]]
}
aux <- log10(y)
z <- (aux - mean(aux))/sd(aux)
F = function(q) pnorm(q, mean = mean(aux), sd = sd(aux))
n = length(aux)
mean(z)
sd(z)
aux
z
aux
sort(y)
sort(aux)
ps = ((1:n) - 0.5)/n
ps
qnorm(ps)
sort(x)
sort(aux)
qqnorm(aux)
qqnorm(z)
ps
qqnorm(ps)
sort(z)
qnorm(ps)
plot(qnorm(ps), sort(z))
help.start()
installed.packages()
library()
4^3
a <- 4 + 56
a
a <- c(1,2,3,4,5,6,7,8,)
a <- c(1,2,3,4,5,6,7,8,9)
a
plot(a)
b <- a + 2
b
plot(a,b)
rnorm(10000)
?plot
example(plot)
a <- c(1,2,3,4,5)
b <- c(6,7,8,9,10)
a + b
ab <- c(a,b)
ab
median(ab)
d <- c(1:10, 30:40,5,7,9,12)
median(d)
sum(d)
x <- NULL
x
x <- c(x,NULL)
x
x <- c(x,3)
x
x <- c(x,5)
x
c <- c(TRUE,FALSE<TRUE<T<F)
c <- c(TRUE,FALSE,TRUE,T<F)
c <- c(TRUE,FALSE,TRUE,T,F)
c
c
c <- c(TRUE,FALSE,TRUE,T,F)
c
c <- c(T,F,TRUE,F,F,TRUE)
c
c1 <- c(T,F,TRUE,F,F,TRUE)
c1
c <- c(TRUE,FALSE,TRUE,T)
c
c[3]
c[c == T]
a
a <- c(1,3,5,3,5,5)
a
a[ a >1 & a < 4]
which(a >1 & a < 4)
seq(2,100,4)
paste("A", 1:6, sep = "")
rep(letters[1:5],3)
set.seed(200)
rep(LETTERS[1:3, 5, replace = T])
rep(LETTERS[1:3] 5, replace = T])
rep(LETTERS[1:3], 5, replace = T])
rep(LETTERS[1:3], 5, replace = T)
rep(LETTERS, 5, replace = T)
sample(LETTERS,5,replace = T)
sample(LETTERS,5,replace = T)
set.seed(200)
sample(LETTERS,5,replace = T)
sample(LETTERS,5,replace = T)
set.seed(200)
set.seed(200)
sample(LETTERS,5,replace = T)
dice <- sample(1:6, 50, replace = T)
dice
typeof(dice)
dice[0]
str(dice)
head(dice)
tail(dice)
summary(dice)
dice[5]
dice[5]<- 55
dice
plot(dice)
which(dice > 6)
M <- dice
M
is.vector(M)
dim(M)<- c(10,5)
M
fix(M)
M
str(M)
"some test"-> M[2,1]
M
MyList <- list(M,a,dice)
MyList
MyList[[1][2,]]
MyList[[1]]
MyList[[1]][2,]
b
data.frame(a,b,c)
a
c
c <- c(c,T)
data.frame(a,b,c)
a
b
b <- c(b,2)
c
c <- c(c,T)
data.frame(a,b,c)
my <- data.frame(a,b,c)
my
str(my)
CircleArea <- function(radius){
radius * radius * pi
}
CircleArea(5)
CircleArea(a)
plot(a,CircleArea(a))
hist(a)
?barplot
barplot(a)
boxplot(a)
pie(a)
piechart(a)
getwd()
dir()
pi
pi <- 12
pi
rm(pi)
pi
data
data("AirPassengers")
data()
head(infert)
names(infert)
education
attach(infert)
education
search()
history()
install.packages("maps")
library(maps)
map("world")
points(0,51.5)
points(0,51.5, col = "blue")
length(builtins())
?erad.table
?read.table
?read.fwf
?read.delim
?read.table
?mosaicplot
?tail
Q6 <- rnorm(1000)^2
plot(Q6)
?RCurl
‘??RCurl’
install.packages("RCurl")
?RCurl
?twitteR
?twitteR
?plot
?mosaicplot
example("mosaicplot")
Q6
tail(Q6)
head(Q6)
dim(Q6)
Q6
plot(Q6)
summary(Q6)
Q7 <- sample(c("nurse","doctor","biomedical scientist"), 100, replace=T, c(0.5, 0.3, 0.2))
Q7
hist(Q7)
pie(table(Q7))
plot(Q7)
pie(Q7)
matrix(1:6,nrow = 2)
matrix(1:6,nncol = 3)
matrix(1:6,ncol = 3)
matrix(1:3,nrow = 2, ncol = 3)
m <- matrix(1:6, bbyrow = TRUE, nrow = 2)
m <- matrix(1:6, byrow = TRUE, nrow = 2)
m
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames(c("row1","row2")))
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames= list)(c("row1","row2")))
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames= list((c("row1","row2")))
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames(c("row1","row2"),c("col1","col2","col3"))
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames(c("row1","row2"),c("col1","col2","col3")))
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames= list((c("row1","row2"),c("col1","col2","col3")))
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames= list((c("row1","row2"),c("col1","col2","col3")))
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames= list((c("row1","row2"),c("col1","col2","col3")))
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames= list((c("row1","row2"),c("col1","col2","col3")))
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames= list((c("row1","row2"),c("col1","col2","col3")))
m <- matrix(1:6, byrow = TRUE, nrow = 2, dimnames= list(c("row1","row2"),c("col1","col2","col3")))
m
scores <- matrix(nrow = 4, ncol = 6)
scores
fly <- c("eco", "bus", "fir", "bus")
fly
fly_factor <- factor(fly)
fly_factor
fly_factor <- factor(fly, ordered = TRUE, levels = "eco","bus","fir", labels = c("economy","business", "first"))
fly_factor <- factor(fly, ordered = TRUE, levels = c("eco","bus","fir"), labels = c("economy","business", "first"))
fly_factor
order?
?order
examples(ordered())
examples(order())
example("order")
setwd("C:/Users/Jorge/Desktop/ProgrammingAssignment2")
list.files()
makeVector <- function(x = numeric(){
m <- NULL
get <- function()x
setmean <- function(mean)m <- mean
getmean <- function() m
list(get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
cachemean(c(1,2,3))
cachemean(makeVecto(c(1,2,3)))
cachemean(makeVector(c(1,2,3)))
makeVector <- function(x = numeric(){
m <- NULL
get <- function()x
setmean <- function(mean)m <- mean
getmean <- function() m
list(get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
cachemean(makeVector(c(1,2,3)))
makeVector <- function(x = numeric(){
m <- NULL
get <- function()x
setmean <- function(mean)m <<- mean
getmean <- function() m
list(get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
cachemean(makeVector(c(1,2,3)))
makeVector <- function(x = numeric(){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function()x
setmean <- function(mean)m <<- mean
getmean <- function() m
list(get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
cachemean(makeVector(c(1,2,3)))
makeVector <- function(x = numeric(){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function()x
setmean <- function(mean)m <<- mean
getmean <- function() m
list(get = get, setmean = setmean, getmean = getmean)
}
makeVector <- function(x = numeric()){
m <- NULL
##set <- function(y){
##x <<- y
##m <<- NULL
}
get <- function()x
setmean <- function(mean)m <<- mean
getmean <- function() m
list(get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
cachemean(makeVector(c(1,2,3)))
makeVector <- function(x = numeric()){
m <- NULL
##set <- function(y){
##x <<- y
##m <<- NULL
}
get <- function()x
setmean <- function(mean)m <<- mean
getmean <- function() m
list(get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
cachemean(makeVector(c(1,2,3)))
makeVector <- function(x = numeric()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean)m <<- mean
getmean <- function() m
list(get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
cachemean(makeVector(c(1,2,3)))
getwd()
makeVector <- function(x = numeric()){
m <- NULL
set <- function(y){
y <<- x
m <<- NULL
}
get <- function() x
setmean <- function(mean)m <<- mean
getmean <- function() m
list(get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
cachemean(makeVector(c(1,2,3)))
cachemean(makeVector(c(10,20,30)))
height <- 2
width <- 4
area <- height - width
area
height <- 2
width <- 4
area <- height * width
area
class(2)
class(2L)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == FALSE) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
! 5 != 7
! 5 == 7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE
)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
